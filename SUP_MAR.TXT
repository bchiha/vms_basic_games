#-----------------------------------------------------------------------
#       S U P E R   M A R I O   B R O T H E R S   R E V E N G E
#-----------------------------------------------------------------------
#.m
!*******************************************************************************
 Image mar, facility=sup, short_name=sm
!--------------------------------------
%ab 
    Super Mario Brothers Revenge is a variant of the popular Nintendo 
    Arcade style game. (c) 2001 B. Chiha
%end %ab
%keywords super,mario,game

Interface

CLD_syntax
    define verb sm
    image "genbld:sup_mar.exe"
end CLD_syntax

end interface
Implementation

Shared

%include 'utebld:smg_stuff.bas'

Record screen_ids
    Long pboard    ! Pasteboard
    Long main      ! Main Screen
    Long score     ! Score Screen
    Long title     ! Title Screen
    Long help      ! Help Screen
    Long msg       ! Message Bar
    Long Kboard    ! Keyboard
End Record

!Map Coordinates
declare long Constant   map_height = 20, &
                        map_length = 100, &
                        score_len = 10, &
                        map_size = map_height * map_length - 1, &
                        map_line_size = map_height - 1, &
                        start_y = 2, &
                        start_x = 5, &                                
                        max_pings= 3

!Screen Titles
declare string Constant game_title = "SUPER MARIO BROTHERS REVENGE", &
                        main_win = "Game", &
                        help_win = "Super Mario Help", &
                        score_win = "Score"

!Special Characters
declare string Constant man_char = '@', &
                        open_map = '_', &
                        blank_char = ' ', &
                        key_char = 'z', &
                        door_char = 'g', &
                        gold_coin = 'f'

!Global Variables -- Yuk
map (sm_data) screen_ids scrn, string mapd(map_size) = 1, &
                               string mapline(map_line_size) = map_length, &
              long curx, cury, on_ground, falling, score, coins, pings, &
              death_fall, has_key, marion_found, quad initial_time

End Shared
!_______________________________________________________________________________
Program sup_mar
option constant type=Integer, handle=severe

declare word key_hit 

! Create Pasteboard and virtual displays
! --------------------------------------
call sm.init_screen

! Create and Show initial map
! ---------------------------
call sm.create_map

! Reset Character
! ---------------
call sm.init_man

! Start the Clock off
! -------------------
external long sm.calc_time
call sys$gettim(initial_time)
call sys$dclast(sm.calc_time,,)

! Create a keyboard and wait for a key to be pressed.  End Game if needed
! -----------------------------------------------------------------------
call smg$create_virtual_keyboard(scrn::kboard, "sys$input:")

while key_hit <> SMG$K_TRM_UPPERCASE_Q and key_hit <> SMG$K_TRM_LOWERCASE_Q
    call smg$read_keystroke(scrn::kboard, key_hit,,,)       
    call sm.move(key_hit)
    call sm.update_score
    if falling or death_fall then
        call sm.game_over
    end if
    if marion_found then
        call sm.end_game
    end if
next

! Remove Virtual Displays and delete it
! -------------------------------------
call sm.kill_screen
call sm.display_credit 
end program

!_______________________________________________________________________________
Sub sm.init_man
option constant type=Integer

! Initialise Mario for new game
!------------------------------
call sm.remove_man
cury = start_y
curx = start_x
call sm.display_man
score = 0         !reset score
coins = 0         !reset coins
pings = max_pings !reset pings
has_key = 0       !return key
call sm.update_score

End sub
!_______________________________________________________________________________
Sub sm.move(word key_hit)
option constant type=Integer

! Analyse key hit and do the resultant request
!
! Movement Notes:
! Mario can move left, right, jump left, jump right and jump up.  The move
! patterns are:
! 
!                                                       @
!                                                       @
!                            @@             @@          @
!                              @           @            @
!                              @           @            @
!    @@           @@           @           @            @
!   <--           -->        <--           -->
! Move Left   Move Right   Jump Left   Jump Right   Jump Up
!
! Each move could lead mario into a pit or a death fall.  A death fall is a
! fall greater than 6 stories (rows).  Mario will fall for each movement until
! he hits the ground or dies (falls into a pit or death falls).  Mario can't 
! die doing a Jump Up as he must have been on the ground initally.  If Mario
! hits a wall the movement is still attempted if possible.  No harm is done
! when Mario hit a wall.
!-----------------------------------------------------------------------------

select key_hit
  case SMG$K_TRM_LESS_THAN, SMG$K_TRM_COMMA_CHAR
      call sm.move_left
  case SMG$K_TRM_GREATER_THAN, SMG$K_TRM_DOT
      call sm.move_right
  case SMG$K_TRM_LOWERCASE_Z, SMG$K_TRM_UPPERCASE_Z
      call sm.jump_left
  case SMG$K_TRM_LOWERCASE_X, SMG$K_TRM_UPPERCASE_X
      call sm.jump_right
  case SMG$K_TRM_UPPERCASE_P, SMG$K_TRM_LOWERCASE_P
      call sm.jump_up
  case SMG$K_TRM_LOWERCASE_H, SMG$K_TRM_UPPERCASE_H
      call sm.help
  case SMG$K_TRM_CTRLW
      call smg$repaint_screen(scrn::pboard)
end select

End Sub
!_______________________________________________________________________________
Sub sm.move_man(long newx, long newy)
option constant type=Integer

! This routine controls the movement of Mario
!--------------------------------------------
declare Byte constant BAS_c_true = -1
declare long map_coord, vrowstart, vcolumnstart, vnumrows, vnumcols

call smg$begin_display_update(scrn::main)
call sm.remove_man

! check boundries
!----------------
newx = 1 if newx = 0
newy = 1 if newy = 0
newx = map_length if newx > map_length
newy = map_height if newy > map_height

! check to see not running into an object
!----------------------------------------
map_coord = ((newy-1) * 100) + (newx - 1) 
if mapd(map_coord) = open_map or mapd(map_coord) = gold_coin or &
   mapd(map_coord) = key_char or (mapd(map_coord) = door_char and has_key) then
    cury = newy
    curx = newx
end if

! check to see if Maid Marion has been found
!-------------------------------------------
map_coord = ((newy-1) * 100) + (newx - 1) 
if mapd(map_coord) = man_char then
    marion_found = bas_c_true
end if

! check to see if Locked door has been found
!-------------------------------------------
map_coord = ((newy-1) * 100) + (newx - 1) 
if mapd(map_coord) = door_char and not has_key then
    call smg$put_chars(scrn::msg, "Use a key to unlock this door",1,1,  &
                       smg$m_erase_to_eol,)
end if

! check to see if key has been found
!-----------------------------------
map_coord = ((cury-1) * 100) + (curx - 1) 
if mapd(map_coord) = key_char then
     has_key = bas_c_true
     score = score + 5             !give points
     mapd(map_coord) = open_map    !remove from map
     call smg$put_chars(scrn::msg, "The key has been found!!",1,1,  &
                        smg$m_erase_to_eol,)
end if

! check to see if gold coin has been found
!-----------------------------------------
map_coord = ((cury-1) * 100) + (curx - 1) 
if mapd(map_coord) = gold_coin then
     score = score + 10            !give points
     coins = coins + 1             !give points
     mapd(map_coord) = open_map    !remove from map
end if

!Scroll window if needed.  
!Scorlling occurs 5 charaters from the end of the viewport
!---------------------------------------------------------
call smg$get_viewport_char(scrn::main, vrowstart, vcolumnstart, vnumrows, &
                           vnumcols)
if (curx < map_length - 5) and (curx > vcolumnstart + vnumcols-7) then
    call smg$scroll_viewport(scrn::main,smg$m_left,1)
else if (curx > 5) and (curx < vcolumnstart + 5) then
         call smg$scroll_viewport(scrn::main,smg$m_right,1)
     end if
end if

call sm.display_man
call smg$end_display_update(scrn::main)

! set important flags
!--------------------
falling = bas_c_true if cury < 2
if not falling then
    map_coord = ((cury-2) * 100) + (curx - 1) 
    on_ground = bas_c_true if mapd(map_coord) <> open_map and &
                              mapd(map_coord) <> gold_coin and &
                              mapd(map_coord) <> door_char and &
                              mapd(map_coord) <> key_char
else
    on_ground = bas_c_true
end if

End sub
!_______________________________________________________________________________
Sub sm.move_left
option constant type=Integer

!Move the guy left 1 and drop till hit ground
!--------------------------------------------
declare Byte constant BAS_c_true = -1
declare long topy
on_ground = 0
call sm.move_man(curx-1, cury)
topy = cury
while not on_ground
    call sm.move_man(curx, cury-1)
    death_fall = bas_c_true if topy - cury > 6
next

End sub
!_______________________________________________________________________________
Sub sm.move_right
option constant type=Integer

!Move the guy right 1 and drop till hit ground
!---------------------------------------------
declare Byte constant BAS_c_true = -1
declare long topy
on_ground = 0
call sm.move_man(curx+1, cury)
topy = cury
while not on_ground
    call sm.move_man(curx, cury-1)
    death_fall = bas_c_true if topy - cury > 6
next

End sub
!_______________________________________________________________________________
Sub sm.jump_left
option constant type=Integer

!Move the guy up 2, left diagonal 1 and left 1 and drop till hit ground
!----------------------------------------------------------------------
declare Byte constant BAS_c_true = -1
declare long topy
on_ground = 0
call sm.move_man(curx, cury+1)
call sm.move_man(curx, cury+1)
call sm.move_man(curx-1, cury+1)
call sm.move_man(curx-1, cury)
topy = cury
while not on_ground
    call sm.move_man(curx, cury-1)
    death_fall = bas_c_true if topy - cury > 6
next

End sub
!_______________________________________________________________________________
Sub sm.jump_right
option constant type=Integer

!Move the guy up 2, right diagonal 1 and right 1 and drop till hit ground
!------------------------------------------------------------------------
declare Byte constant BAS_c_true = -1
declare long topy
on_ground = 0
call sm.move_man(curx, cury+1)
call sm.move_man(curx, cury+1)
call sm.move_man(curx+1, cury+1)
call sm.move_man(curx+1, cury)
topy = cury
while not on_ground
    call sm.move_man(curx, cury-1)
    death_fall = bas_c_true if topy - cury > 6
next

End sub
!_______________________________________________________________________________
Sub sm.jump_up
option constant type=Integer

!Move the guy up 5 and drop till hit ground
!------------------------------------------
on_ground = 0
exit sub if pings = 0
pings = pings - 1
call sm.move_man(curx, cury+1)
call sm.move_man(curx, cury+1)
call sm.move_man(curx, cury+1)
call sm.move_man(curx, cury+1)
call sm.move_man(curx, cury+1)
while not on_ground
    call sm.move_man(curx, cury-1)
next

End sub
!_______________________________________________________________________________
Sub sm.display_man
option constant type=Integer

!Print Mario at the current x,y coordinates on the map
!-----------------------------------------------------
call smg$put_chars(scrn::main, man_char, map_height+1-cury, curx,, smg$m_bold)

End sub
!_______________________________________________________________________________
Sub sm.remove_man
option constant type=Integer

!Remove Mario at the current x,y coordinates on the map
!------------------------------------------------------
call smg$put_chars(scrn::main, blank_char, map_height+1-cury, curx)

End sub
!_______________________________________________________________________________
Sub sm.update_score
option constant type=Integer

!Put the current score and values to the screen
!----------------------------------------------
call smg$put_chars(scrn::score, format$(score,'<%>#####'), 2, 2)
call smg$put_chars(scrn::score, format$(coins,'<%>#####'), 5, 2)
call smg$put_chars(scrn::score, format$(pings,'<%>#####'), 8, 2)

End sub
!_______________________________________________________________________________
Sub sm.help
option constant type=Integer

! Acivate Help Screen
!--------------------
declare word key_hit
call smg$paste_virtual_display(scrn::help, scrn::pboard, 5, 5)
call smg$read_keystroke(scrn::kboard, key_hit,,,)   
call smg$unpaste_virtual_display(scrn::help, scrn::pboard)   
End Sub
!_______________________________________________________________________________
Sub sm.game_over
option constant type=Integer

!Game over module.  Display message and Restart game
!---------------------------------------------------
external long sm.calc_time
declare word key_hit, string msg

if falling then
    msg = "AAAaaarrggghhh!"
else if death_fall then
         msg = "Splat!!"
     end if
end if
call smg$put_chars(scrn::msg, msg + " | Game Over Dude! -- press any key to restart",1,1,,smg$m_blink)
call smg$read_keystroke(scrn::kboard, key_hit,,,)       
call sm.kill_screen
call sm.init_screen
call sm.create_map
call sm.init_man
call sys$gettim(initial_time)
falling = 0       !stop falling
death_fall = 0    !stop falling

End sub
!_______________________________________________________________________________
Sub sm.end_game
option constant type=Integer

!End game module.  Display message and restart game
!--------------------------------------------------
declare word key_hit, string msg, timer

call smg$read_from_display(scrn::score, timer,,11,)
timer = seg$(timer,3,7)
call smg$ring_bell(scrn::msg, 4)
msg = "Congratulations!! You have won the game in a time of " + timer + &
      " and with " + str$(score) + " points"
call smg$put_chars(scrn::msg, msg,1,1,,smg$m_bold)
call smg$read_keystroke(scrn::kboard, key_hit,,,)       
call sm.kill_screen
call sm.init_screen
call sm.create_map
call sm.init_man
call sys$gettim(initial_time)
falling = 0       !stop falling
death_fall = 0    !stop falling
marion_found = 0  !find marion again

End sub
!_______________________________________________________________________________
Sub sm.calc_time(long para1,R0,R1,PC,PSL)
option constant type=Integer, type=Integer

!Asynchronous routine executed every second to display timer
!-----------------------------------------------------------
external long sm.calc_time
declare quad current_time, daytim, string diff_time

call sys$gettim(current_time)
diff_time = space$(23)
call sys$asctim(, diff_time, current_time-initial_time,) 
call smg$put_chars(scrn::score, seg$(diff_time,16,20), 11, 3)
diff_time = "0 ::01.00"                     !redo every second
call SYS$BINTIM(diff_time, daytim)
call SYS$SETIMR(,daytim, sm.calc_time,0,0)  !resubmit module

End sub
!_______________________________________________________________________________
Sub sm.display_credit
option constant type=Integer, handle=severe

! Display closing message when quitting
!--------------------------------------

external Long function ots$cvt_tz_l(String !hex_str!, Long !val!, &
    Long by value !val_size!)
declare long z,bina,i
declare string hex

data "16","00","09","09","09","09","09","42","72","6F","75","67","68","74","20","74"
data "6F","20","79","6F","75","20","62","79","0D","0A","09","09","09","09","09","53"
data "4C","41","52","54","49","42","41","52","54","46","41","53","54","20","49","4E"
data "43","2E","0D","0A","0D","0A","20","5F","5F","5F","5F","20","20","20","20","20"
data "20","20","20","20","20","20","20","20","5F","5F","5F","5F","20","20","20","20"
data "20","20","20","20","20","20","20","20","20","20","20","20","20","20","20","20"
data "20","20","20","20","20","20","20","20","20","20","20","20","7C","2B","2B","2B"
data "2B","2B","7C","0D","0A","00","7C","2B","2B","2B","2B","7C","20","20","20","20"
data "5F","5F","5F","20","20","20","20","7C","2B","2B","2B","2B","7C","20","20","20"
data "20","20","20","20","20","20","20","20","20","20","20","20","20","20","20","20"
data "20","20","20","20","5F","5F","5F","5F","20","20","20","20","7C","2B","2B","2B"
data "2B","2B","7C","0D","0A","00","7C","2B","2B","2B","2B","7C","20","20","20","7C"
data "2B","2B","20","5F","5F","5F","5F","5F","5F","5F","5F","5F","5F","5F","5F","5F"
data "5F","5F","5F","5F","5F","5F","5F","5F","5F","20","20","20","20","20","20","20"
data "20","20","20","7C","2B","2B","2B","2B","7C","20","20","20","7C","2B","2B","2B"
data "2B","2B","7C","0D","0A","00","7C","2B","2B","2B","2B","7C","20","20","20","7C"
data "2B","2B","2F","20","20","20","20","20","20","2F","28","20","29","5C","20","20"
data "20","20","20","20","20","20","20","20","20","5C","20","20","20","20","20","20"
data "20","20","20","7C","2B","2B","2B","2B","7C","20","20","20","7C","2B","2B","2B"
data "2B","2B","7C","20","20","20","5F","5F","0D","0A","7C","20","20","20","20","7C"
data "20","20","20","7C","2B","7C","20","20","20","20","20","20","7C","2D","6F","6F"
data "20","2D","7C","20","20","20","20","20","20","20","20","20","20","20","5C","5F"
data "5F","5F","5F","5F","5F","20","20","7C","2B","2B","2B","2B","7C","20","20","20"
data "7C","2B","2B","2B","2B","2B","7C","20","20","7C","2B","2B","7C","0D","0A","00"
data "2D","2D","2D","2D","2D","28","5F","5F","29","2D","2D","7C","20","20","20","20"
data "20","20","20","5C","5F","5F","5C","2F","20","20","20","20","20","20","20","20"
data "20","20","20","5F","28","5F","5F","29","5F","20","20","5C","20","2D","2D","2D"
data "2D","2D","2D","2D","2D","2D","2D","2D","2D","2D","2D","2D","2D","2D","2D","2D"
data "2D","2D","2D","2D","2D","2D","2D","2D","2D","2D","2D","2D","2D","2D","2D","0D"
data "0A","00","20","6F","20","20","20","28","20","6F","6F","20","20","2F","5F","5F"
data "5F","5F","5F","5F","5F","5F","5F","5F","5F","5F","5F","5F","5F","5F","5F","5F"
data "5F","5F","5F","5F","5F","7C","28","6F","6F","29","20","20","5C","20","7C","20"
data "20","20","20","20","20","20","20","20","5F","5F","0D","0A","20","7C","20","20"
data "5F","2F","5C","5F","7C","20","7C","20","20","4D","20","4F","20","4F","20","2D"
data "20","42","20","55","20","53","20","54","20","45","20","52","20","53","7C","5F"
data "5F","5C","2F","5C","20","2F","7C","20","7C","20","20","20","20","20","20","20"
data "20","2F","6F","6F","7C","20","2D","20","42","6C","65","61","75","72","67","68"
data "21","0D","0A","00","20","7C","2D","7C","20","20","5C","5C","5F","5F","5F","5F"
data "20","20","20","20","20","20","20","20","20","20","20","20","20","20","20","20"
data "20","20","20","20","20","20","20","20","20","2D","2D","2D","2D","2D","2D","20"
data "20","29","5F","20","20","20","20","2F","7C","20","20","2F","5C","0D","0A","00"
data "20","20","2D","7C","5F","20","20","5C","5F","7C","2D","5F","7C","5E","5E","5E"
data "5E","5E","5E","5E","5E","5E","5E","5E","5E","5E","5E","5E","5E","5E","5E","5E"
data "5E","5E","5E","5E","5E","5E","5E","20","30","20","20","20","20","20","5F","7C"
data "20","20","2A","20","20","5C","2F","20","20","2A","0D","0A","20","20","20","20"
data "20","5C","20","20","7C","20","20","5F","5F","5F","5F","5F","5F","5F","5F","5F"
data "5F","5F","5F","5F","5F","5F","5F","5F","5F","5F","5F","5F","5F","5F","5F","5F"
data "5F","5F","5F","5F","5F","5F","5F","5F","5F","2F","0D","0A","20","20","20","20"
data "20","7C","20","20","57","7C","20","20","5C","20","5C","5F","2F","20","2F","2D"
data "2D","2D","2D","2D","2D","2D","2D","2D","2D","2D","2D","2D","2D","2D","2D","2D"
data "20","5C","20","5C","5F","2F","20","2F","0D","0A","20","20","20","20","20","2F"
data "20","2F","5C","20","5C","20","20","5C","5F","5F","5F","2F","20","20","20","20"
data "20","20","20","20","20","20","20","20","20","20","20","20","20","20","20","20"
data "5C","5F","5F","5F","2F","0D","0A","00","20","20","20","20","2F","20","2F","20"
data "20","5C","20","5C","0D","0A","20","20","20","20","5E","5E","5E","20","20","20"
data "5E","5E","5E","20","20","20","20","20","20","20","20","20","20","20","20","20"
data "20","20","20","20","20","20","20","20","20","20","20","20","20","20","20","20"
data "20","20","20","20","20","20","20","20","20","57","68","6F","20","79","6F","75"
data "20","67","6F","6E","6E","61","20","63","61","6C","6C","2E","2E","2E","3F","00"

for i = 1 to 16*59 
    read hex
    z = ots$cvt_tz_l(hex, bina, 4)
    print string$(1,bina);
next i

End sub

!_______________________________________________________________________________
Sub sm.init_screen
option constant type=Integer

! Create and paste screens
!------------------------- 
declare Long rows, cols
call smg$create_pasteboard(scrn::pboard,, rows, cols)
call smg$create_virtual_display(1, cols, scrn::title)
call smg$create_virtual_display(15,61, scrn::help, smg$m_block_border)
call smg$label_border(scrn::help, help_win,,,smg$m_bold or smg$m_user5)
call smg$create_virtual_display(map_height,map_length, scrn::main, smg$m_border)
call smg$label_border(scrn::main, main_win,,,smg$m_bold)
call smg$create_virtual_display(map_height,score_len, scrn::score, smg$m_border)
!call smg$label_border(scrn::score, score_win,,,smg$m_bold)
call smg$create_virtual_display(1, cols, scrn::msg)
call smg$paste_virtual_display(scrn::title, scrn::pboard, 1, 1)
call smg$create_viewport(scrn::main, 1, 1, map_height+1, cols-score_len-3)
call smg$paste_virtual_display(scrn::main, scrn::pboard, 3, 2)
call smg$paste_virtual_display(scrn::score, scrn::pboard, 3, cols-score_len)
call smg$paste_virtual_display(scrn::msg, scrn::pboard, map_height+4, 1)

! Fill out screens with useful information
!-----------------------------------------
call smg$put_chars_wide(scrn::title, game_title,1,cols/2 - len(game_title),  &
                                        SMG$M_BOLD or SMG$M_REVERSE)
call smg$put_chars(scrn::score, "Score",1,3,,SMG$M_BOLD)
call smg$put_chars(scrn::score, "Coins",4,3,,SMG$M_BOLD)
call smg$put_chars(scrn::score, "Pings",7,3,,SMG$M_BOLD)
call smg$put_chars(scrn::score, "Time",10,3,,SMG$M_BOLD)
call smg$put_chars(scrn::score, "Keys",13,3,,SMG$M_BOLD)
call smg$put_chars(scrn::score, "> - Left",14,1)
call smg$put_chars(scrn::score, "< - Right",15,1)
call smg$put_chars(scrn::score, "Z - Jump L",16,1)
call smg$put_chars(scrn::score, "X - Jump R",17,1)
call smg$put_chars(scrn::score, "P - Ping",18,1)
call smg$put_chars(scrn::score, "H - Help",19,1)
call smg$put_chars(scrn::score, "Q - Quit",20,1)
call smg$put_chars(scrn::msg, "Welcome to my Adventure")
call smg$put_chars(scrn::help, "The aim of the Game is to get Little Mario out of the",2,5,,)
call smg$put_chars(scrn::help, "deadly labyrinth and save the lovely Maid Marion.  To",3,5,,)
call smg$put_chars(scrn::help, "move Mario without dying you will have to jump up and",4,5,,)
call smg$put_chars(scrn::help, "over obstacles.  Gold coins can be found in the maze.",5,5,,)
call smg$put_chars(scrn::help, "There are 20 to be found.  Mario can apply  his super",6,5,,)
call smg$put_chars(scrn::help, "pinggy shoes to jump up high places. Only three pings",7,5,,)
call smg$put_chars(scrn::help, "are availble.  You must collect the key to unlock the",8,5,,)
call smg$put_chars(scrn::help, "door to save Marion. The map features are as follows:",9,5,,)
call smg$put_chars(scrn::help, man_char,11,10,,smg$m_bold,,)
call smg$put_chars(scrn::help, "-- Mario",11,12,,,,)
call smg$put_chars(scrn::help, key_char,11,40,,smg$m_user4 or smg$m_bold,,     &
                   SMG$C_SPEC_GRAPHICS)
call smg$put_chars(scrn::help, "-- Key",11,42,,,,)
call smg$put_chars(scrn::help, man_char,12,10,,smg$m_bold or smg$m_user5,,)
call smg$put_chars(scrn::help, "-- Maid Marion",12,12,,,,)
call smg$put_chars(scrn::help, "lqqqk",12,36,,,,SMG$C_SPEC_GRAPHICS)
call smg$put_chars(scrn::help, gold_coin,13,10,,smg$m_bold or smg$m_user8,,    &
                   SMG$C_SPEC_GRAPHICS)
call smg$put_chars(scrn::help, "-- Gold Coin",13,12,,,,)
call smg$put_chars(scrn::help, "xaaax",13,36,,,,SMG$C_SPEC_GRAPHICS)
call smg$put_chars(scrn::help, "-- Land Mass",13,42,,,,)
call smg$put_chars(scrn::help, door_char,14,10,,smg$m_bold or smg$m_user6,,    &
                   SMG$C_SPEC_GRAPHICS)
call smg$put_chars(scrn::help, "-- Locked Door",14,12,,,,)
call smg$put_chars(scrn::help, "mqqqj",14,36,,,,SMG$C_SPEC_GRAPHICS)

End Sub

!_______________________________________________________________________________
Sub sm.kill_screen
option constant type=Integer

! removed the screens
! -------------------
call smg$unpaste_virtual_display(scrn::main, scrn::pboard)   
call smg$delete_virtual_display(scrn::main)
call smg$unpaste_virtual_display(scrn::score, scrn::pboard)   
call smg$delete_virtual_display(scrn::score)
call smg$unpaste_virtual_display(scrn::msg, scrn::pboard)   
call smg$delete_virtual_display(scrn::msg)
call smg$unpaste_virtual_display(scrn::title, scrn::pboard)   
call smg$delete_virtual_display(scrn::title)
call smg$delete_virtual_display(scrn::help)
call smg$delete_pasteboard(scrn::pboard)
End Sub                                       

!_______________________________________________________________________________
Sub sm.create_map
option constant type=Integer

! Create the main map by using VMS Graphics character set
!--------------------------------------------------------
declare long i,j,x,y

! Fill in Each Line
! -----------------
!              123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789
!                       10        20        30        40        50        60        70        80        90        100
mapline(19) = "___BROUGHT TO YOU_BY______________________________________________________________________________aa"
mapline(18) = "____SLARTIBARTFAST____________________________________________x___________________________________aa"
mapline(17) = "_____________________________________________________________x____________________________________aa"
mapline(16) = "____________________________________________________________x_______qqqq__________qqqq____________aa"
mapline(15) = "___________________________________________________________x____x_________________________________aa"
mapline(14) = "_________________________________________________lqk______x___________________________x_________aaaa"
mapline(13) = "_____________________________________lqqqqk______xax_____x________x_____x_x_x___x_________________aa"
mapline(12) = "_____________________________________mqqqqj______xax____x______________________________qqqq_qqq___aa"
mapline(11) = "____________________________________________lqqqqjamqqqqk___________x_x_______x___________________aa"
mapline(10) = "_______lqqqqqqqqqqqqqk________lqqqqk________mqqqqqqqqqqqj_______________________________________aaaa"
mapline(9)  = "_______mqqqqqqqqqqqqqj________mqqqqj______________________________________________________________aa"
mapline(8)  = "________________________________________________________________________x_x____x___________qqqq___aa"
mapline(7)  = "_______________________lqqqqk_____________________________________________________________________aa"
mapline(6)  = "_______________________mqqqqj_____________________________________________________________________aa"
mapline(5)  = "____________________________________________lqqqqk_lqqqqk___________________x___________________aaaa"
mapline(4)  = "qk_______________lqqqk______________________mqkaax_xaalqj_________________x______________________aaa"
mapline(3)  = "ax______________ljaaamk_______________________xaax_xaax_________________x____________lqqqqk_________"
mapline(2)  = "ax_____________ljaaaaamk__________________lqqqjaax_xaamqqqk________________lqqqqk____xaaaax_qqq__lqq"
mapline(1)  = "amk____lk_____ljaaaaaaamk_______________lqjaaaaaax_xaaaaaamqk____lqqqqk____xaaaax____xaaaax______xaa"
mapline(0)  = "aamqqk_xmqqqqqjaaaaaaaaamqqqqqqqqk_x_x_ljaaaaaaaax_xaaaaaaaamqqqqjaaaax____xaaaax____xaaaax____lqjaa"
!              123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789
!                       10        20        30        40        50        60        70        80        90        100

! Put map array to main screen
!-----------------------------
for i = 0 to 19
    for j = 1 to 100
        mapd(i*100+j-1) = seg$(mapline(i),j,j)
    next j
    call smg$put_chars(scrn::main, mapline(i),map_height-i,1,,,,               &
                       SMG$C_SPEC_GRAPHICS)
next i

!Place Special characters on screen.
!-----------------------------------
!Put Lady
!--------
mapd(3*100+99) = man_char
call smg$put_chars(scrn::main, man_char, 17, 100,, smg$m_bold or smg$m_user5)

!Put Key
!-------
mapd(12*100+54) = key_char
call smg$put_chars(scrn::main, key_char, 8, 55,, smg$m_user4 or smg$m_bold,,   &
                   SMG$C_SPEC_GRAPHICS)

!Put Door
!--------
mapd(3*100+98) = door_char
call smg$put_chars(scrn::main, door_char, 17, 99,, smg$m_bold or smg$m_user6,, &
                   SMG$C_SPEC_GRAPHICS)

!Put Coins x,y position
!----------------------
data 1,51,1,63,3,70,3,71,3,84,3,85,4,15,5,98,8,8,8,22,9,98,10,1,14,15
data 14,98,15,13,15,17,15,87,16,36,16,38,16,77

for i = 1 to 20
    read x,y
    mapd(((20-x)*100)+y-1) = gold_coin
    call smg$put_chars(scrn::main, gold_coin, x, y,, smg$m_bold or &
                       smg$m_user8,,SMG$C_SPEC_GRAPHICS)
next i

!Turn cursor off
!---------------
call smg$set_cursor_mode(scrn::pboard,SMG$M_CURSOR_OFF)

End Sub

end implementation
end image

#.LNK
$! Output from FIX_LINK, 22-MAY-2001 13:34:45.05
$ link sys$input:/option /exe=genbld:sup_mar.exe 'P1'
genbld:sup_mar.obj, -
decbld:sis_swnlib.olb/library
$exit
